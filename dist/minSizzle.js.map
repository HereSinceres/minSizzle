{"version":3,"sources":["minSizzle.js"],"names":["window","isWindow","obj","isArray","Object","prototype","toString","call","isFunction","makeArray","iterable","console","log","ret","len","length","matchEl","crumb","context","i","j","tagName","id","clazz","pattern","rets","match","concat","getElementsByTagName","toUpperCase","replace","RegExp","test","matchExpr","splice","className","minSizzle","selector","selectorEl","nodes","document","nodeType","getElementById","split","identifier","ID","CLASS","TAG","_sizzle","noConflict","define","amd","module","exports"],"mappings":"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","file":"minSizzle.js","sourcesContent":["(function (window) {\r\n    // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\r\n    //identifier 匹配规则\r\n    var identifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\";\r\n    var matchExpr = {\r\n        \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\r\n        \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\r\n        \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\")\r\n    };\r\n\r\n    function isWindow(obj) {\r\n        return obj != null && obj.window == window;\r\n    }\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == \"[object Array]\";\r\n    }\r\n\r\n    function isFunction(obj) {\r\n        return Object.prototype.toString.call(obj) == \"[object Function]\";\r\n    }\r\n\r\n    function makeArray(iterable) {\r\n        console.log(iterable);\r\n        var ret = [],\r\n            len = iterable.length;\r\n        //String、window和function也有length属性\r\n        if (len == null || typeof iterable === \"string\" || isFunction(iterable) || isWindow(iterable))\r\n            ret[0] = iterable;\r\n        else\r\n            while (len)\r\n                ret[--len] = iterable[len];\r\n        return ret;\r\n    }\r\n\r\n\r\n    /**\r\n     * 在上下文中根据选择器文本匹配DOM\r\n     * @param  {} crumb 选择器文本 'div#js-id.js-class ul.js-ul li p'\r\n     * @param  {} context 上下文限定\r\n     * @return {Array} 匹配到的DOM节点组成的数组\r\n     */\r\n    function matchEl(crumb, context) {\r\n        var i, j, len, len2, rets = [],\r\n            ret, tagName, id, clazz, child, pattern, type, attr, val, dice, queue;\r\n        //上下文为数组\r\n        context = isArray(context) ? context : [context];\r\n        console.log('要匹配的文本和上下文:', crumb, context);\r\n        //获取标签\r\n        tagName = crumb.match(/^\\w+/) !== null && crumb.match(/^\\w+/)[0] || \"*\";\r\n        console.log(\"匹配到的标签:\", tagName);\r\n        for (i = 0, len = context.length; i < len; i++) {\r\n            rets = rets.concat(\r\n                makeArray(\r\n                    context[i].getElementsByTagName(tagName.toUpperCase())));\r\n        }\r\n        if (tagName !== \"*\") {\r\n            crumb = crumb.replace(new RegExp(\"^\" + tagName, \"\"), \"\");\r\n        }\r\n\r\n        //loop the left crumbs char to specialfy the ones\r\n        //id\r\n        if (/^#/.test(crumb)) {\r\n            id = crumb.match(matchExpr[\"ID\"])[0].replace(\"#\", \"\");\r\n            crumb = crumb.replace(new RegExp(\"^#\" + id, \"\"), \"\");\r\n            for (j = 0, len = rets.length; j < len; j++) {\r\n                //shortcut\r\n                ret = rets[j];\r\n                if (ret.id != id) {\r\n                    rets.splice(j, 1);\r\n                    len--;\r\n                    --j;\r\n                }\r\n            }\r\n        }\r\n\r\n        //class\r\n        if (/^\\./.test(crumb)) {\r\n            clazz = crumb.match(matchExpr[\"CLASS\"])[0].replace(\".\", \"\");\r\n            crumb = crumb.replace(new RegExp(\"^\\.\" + clazz, \"\"), \"\");\r\n            for (j = 0, len = rets.length; j < len; j++) {\r\n                //shortcut\r\n                ret = rets[j];\r\n                className = \" \" + ret.className + \" \";\r\n                pattern = new RegExp(clazz, \"\");\r\n                if (!pattern.test(className)) {\r\n                    rets.splice(j, 1);\r\n                    len--;\r\n                    --j;\r\n                }\r\n            }\r\n        }\r\n        //child([attr=?])\r\n        // if (/^\\[[^\\]]*\\]/.test(crumb)) {\r\n        //     seed = crumb.match(/^\\[[^\\]]*\\]/)[0].replace(\"[\", \"\").replace(\"]\", \"\");\r\n        //     crumb = crumb.replace(\"[\" + seed + \"]\", \"\");\r\n        //     attr = seed.match(/^\\w+/)[0];\r\n        //     seed = seed.replace(new RegExp(\"^\" + attr, \"\"), \"\");\r\n        //     expr = seed.match(/^(!=|=)/)[0];\r\n        //     seed = seed.replace(new RegExp(\"^\" + expr, \"\"), \"\");\r\n        //     val = seed;\r\n        //     if (expr === \"!=\") {\r\n        //         for (j = 0, len = rets.length; j < len; j++) {\r\n        //             //shortcut\r\n        //             ret = rets[j];\r\n        //             if (css.attr(ret, attr) == val) {\r\n        //                 rets.splice(j, 1);\r\n        //                 len--;\r\n        //                 --j;\r\n        //             }\r\n        //         }\r\n        //     } else {\r\n        //         for (j = 0, len = rets.length; j < len; j++) {\r\n        //             //shortcut\r\n        //             ret = rets[j];\r\n        //             if (css.attr(ret, attr) != val) {\r\n        //                 rets.splice(j, 1);\r\n        //                 len--;\r\n        //                 --j;\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n        //child(:odd,:even,:random)\r\n        // if (/^:/.test(crumb)) {\r\n        //     seed = crumb.match(/^:\\w+/)[0].replace(\":\", \"\");\r\n        //     crumb = crumb.replace(new RegExp(\"^:\" + seed, \"\"), \"\");\r\n        //     type = seed.match(/^\\w+/)[0];\r\n        //     seed = seed.replace(type, \"\");\r\n        //     switch (type) {\r\n        //         case \"odd\":\r\n        //             for (len = rets.length, j = rets.length - 1; j >= 0; j--) {\r\n        //                 //shortcut\r\n        //                 ret = rets[j];\r\n        //                 if (j % 2 == 1) {\r\n        //                     rets.splice(j, 1);\r\n        //                     len--;\r\n        //                     --j;\r\n        //                 }\r\n        //             }\r\n        //             break;\r\n\r\n        //         case \"even\":\r\n        //             for (len = rets.length, j = rets.length - 1; j >= 0; j--) {\r\n        //                 //shortcut\r\n        //                 ret = rets[j];\r\n        //                 if (j % 2 == 0) {\r\n        //                     rets.splice(j, 1);\r\n        //                     len--;\r\n        //                     --j;\r\n        //                 }\r\n        //             }\r\n        //             break;\r\n\r\n        //         case \"random\":\r\n        //             //如果小于1则视为百分比的几率选取\r\n        //             //如果大于等于1则视为随机保留的个数\r\n        //             seed = seed || 1;\r\n        //             if (seed < 1) {\r\n        //                 for (j = 0, len = rets.length; j < len; j++) {\r\n        //                     //shortcut\r\n        //                     dice = Math.random();\r\n        //                     ret = rets[j];\r\n        //                     if (dice > seed) {\r\n        //                         rets.splice(j, 1);\r\n        //                         len--;\r\n        //                         --j;\r\n        //                     }\r\n        //                 }\r\n        //             } else {\r\n        //                 queue = [];\r\n        //                 seed = rets.length - parseInt(seed);\r\n        //                 while (queue.length < seed) {\r\n        //                     dice = Math.round(Math.random() * (rets.length - 1));\r\n        //                     queue[queue.length] = rets[dice];\r\n        //                     rets.splice(dice, 1);\r\n        //                 }\r\n        //             }\r\n        //             break;\r\n        //     }\r\n        // }\r\n\r\n        //peal blank at head\r\n        crumb = crumb.replace(/^\\s+/, \"\");\r\n\r\n        //is it nessesary to continue\r\n        if (crumb)\r\n            return matchEl(crumb, rets);\r\n        else {\r\n            //去除重复的元素\r\n            return rets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param  {} 选择器\r\n     * @param  {} 源上下文\r\n     */\r\n    function minSizzle(selector, context) {\r\n        //申明fizzle对象中的属性\r\n        //1. 以[0]开始的数组，存储匹配到的元素（隐藏）\r\n        //2. 匹配到的元素的长度\r\n        var length = 0,\r\n            i, j, crumbs, nodes = [],\r\n            node, selectorEl, offset = 0,\r\n            rets = [];\r\n\r\n\r\n\r\n        //保证集合中至少有一个元素\r\n        selector = selector || document;\r\n        //保证有初始上下文，默认亦为document\r\n        context = context && context.nodeType === 1 ? context : document;\r\n\r\n        //根据给定的selector类型，可能有以下几种类型\r\n        //1. 本身是Windoow等其他对象\r\n        //2. 本身就是个DOM元素\r\n        //3. 字符串类型\r\n        //现在我们依次对每个情况做出处理\r\n\r\n        //1..\r\n        //如果是对象就直接返回\r\n        if (typeof selector === document || isWindow(selector))\r\n            return selector;\r\n\r\n        //2..\r\n        //DOM元素的nodeType值均为1\r\n        if (selector.nodeType === 1) {\r\n            return selector;\r\n        }\r\n\r\n        //3..\r\n        //解析字符串\r\n        if (typeof selector == \"string\") {\r\n            //首先去除首尾的空白\r\n            selector = selector.replace(/^\\s+|\\s+$/g, \"\");\r\n            //如果选择器为类似#id的简单形式，则调用原生的方法以提升效率\r\n            if (matchExpr[\"ID\"].test(selector)) {\r\n                return document.getElementById(selector.replace(\"#\", \"\"));\r\n            } else {\r\n                //运行到这里意味着选择器是个比较复杂的形式\r\n                //@var {String} selectorEl 选择器的单个元素，如：\r\n                //    $(\"div#nerd.is ul.happy li p, input.me\");\r\n                //    将会被视为\r\n                //        div#nerd.is ul.happy li p,\r\n                //        input.me \r\n                //@var {Array} nodes 临时存储匹配到的节点\r\n                selectorEl = selector.split(\",\");\r\n                for (i = 0, len = selectorEl.length; i < len; i++) {\r\n                    j = 0;\r\n                    //空白的节点不应该被检测，写错了？\r\n                    if (selectorEl[i] && !/^\\s+$/.test(selectorEl[i])) {\r\n                        nodes = matchEl(selectorEl[i], context);\r\n                        rets = rets.concat(nodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return rets; \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    var _sizzle = window.minSizzle;\r\n\r\n    minSizzle.noConflict = function () {\r\n        if (window.minSizzle === minSizzle) {\r\n            window.minSizzle = _sizzle;\r\n        }\r\n\r\n        return minSizzle;\r\n    };\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(function () {\r\n            return minSizzle;\r\n        });\r\n    } else if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = minSizzle;\r\n    } else {\r\n        window.minSizzle = minSizzle;\r\n    }\r\n})(window)"]}